<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://happyCoding1024.github.io</id>
    <title>前端旧约</title>
    <updated>2023-12-06T06:04:18.893Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://happyCoding1024.github.io"/>
    <link rel="self" href="https://happyCoding1024.github.io/atom.xml"/>
    <subtitle>前端旧约</subtitle>
    <logo>https://happyCoding1024.github.io/images/avatar.png</logo>
    <icon>https://happyCoding1024.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 前端旧约</rights>
    <entry>
        <title type="html"><![CDATA[ JSX 代码是如何“摇身一变”成为 DOM 的？]]></title>
        <id>https://happyCoding1024.github.io/post/jsx-dai-ma-shi-ru-he-yao-shen-yi-bian-cheng-wei-dom-de/</id>
        <link href="https://happyCoding1024.github.io/post/jsx-dai-ma-shi-ru-he-yao-shen-yi-bian-cheng-wei-dom-de/">
        </link>
        <updated>2023-12-05T02:55:37.000Z</updated>
        <content type="html"><![CDATA[<p>JSX 是一种语法，并不是 React 中的内容，时下接入 JSX 语法的框架越来越多，但与之缘分最深的仍然是 React。本节来讲一下 React 是如何摇身一变成为 DOM 的。</p>
<p>我们平时在写React时会用 JSX 来描述组件的内容，例如下面的代码中，render 方法 return 的内容就是 JSX 代码。</p>
<pre><code class="language-jsx">class App extends React.Component {
  render() {
    return (
      &lt;div className=&quot;App&quot;&gt;
        &lt;h1 className=&quot;title&quot;&gt;I am the title&lt;/h1&gt;
        &lt;p className=&quot;content&quot;&gt;I am the content&lt;/p&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>
<p>我们考虑以下三个问题：</p>
<ol>
<li>JSX 的本质是什么，它和 JS 之间到底是什么关系？</li>
<li>React 为什么要用 JSX？</li>
<li>JSX 是如何映射为 DOM 的？</li>
</ol>
<p>这一节我们就将这三个问题一一解答。</p>
<h2 id="1jsx-的本质是什么它和js之间的到底是什么关系">1）JSX 的本质是什么？它和JS之间的到底是什么关系？</h2>
<p>JSX 到底是什么，我们先来看看 React 官网给出的一段定义：</p>
<blockquote>
<p>JSX 是 JavaScript 的一种语法扩展，它和模板语言很接近，但是它充分具备 JavaScript 的能力。</p>
</blockquote>
<p>“语法扩展”这一点在理解上几乎不会产生歧义，不过“它充分具备 JavaScript 的能力”这句，却总让人摸不着头脑，JSX 和 JS 怎么看也不像是一路人啊？这就引出了“JSX 语法是如何在 JavaScript 中生效的”这个问题。</p>
<p>JSX 是 JavaScript 的扩展，而不是 JavaScript 的某个版本，因此浏览器并不会天然支持，那么 JSX 是如何在 JavaScript 中生效的呢？</p>
<p>React 官网是这样的解释的：</p>
<blockquote>
<p>JSX 会被编译为 React.createElement()， React.createElement() 将返回一个叫作“React Element”的 JS 对象。</p>
</blockquote>
<p>那么 JSX 如何转换成 React.createElement() 的呢？答案就是通过 babel 转换。</p>
<p>我们直接打开 babel playground 来写一段 JSX 代码看一下 babel 转换后的结果。![image-20231204112041472](/Users/jiuyuezhang/Library/Application Support/typora-user-images/image-20231204112041472.png)</p>
<p>可以看到 JSX 代码都被转换成了 React.createElement 调用。</p>
<p>接下来我们总结一下来回答标题提到的两个问题。</p>
<p>JSX 是 JavaScript 的扩展，不是 JavaScipt 的某个版本，需要通过 Babel 进行转换成 JavaScript 代码。</p>
<p>JSX 会被 babel 转换为 React.CreateElement(...) 调用的形式，执行后返回的结果是一个对象。</p>
<h2 id="2react-为什么要用-jsx">2）React 为什么要用 JSX？</h2>
<p>从上一节我们知道  JSX  等价于一次 React.createElement 调用，那么 React 官方为什么不直接引导我们用 React.createElement 来创建元素呢？</p>
<p>在实际功能效果一致的前提下，JSX 代码层次分明、嵌套关系清晰；而 React.createElement 代码则给人一种非常混乱的“杂糅感”，这样的代码不仅读起来不友好，写起来也费劲。</p>
<p>JSX 语法糖允许前端开发者使用我们最为熟悉的类 HTML 标签语法来创建虚拟 DOM，在降低学习成本的同时，也提升了研发效率与研发体验。</p>
<h2 id="3jsx-是如何映射为-dom-的">3）JSX 是如何映射为 DOM 的？</h2>
<p>我们知道 JSX 经过babel转换后会变成 <code>React.createElement(...)</code> 的形式，接下来我们就来一起探讨一下 <code>React.createElement(...)</code> 是如何工作的？</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/happyCoding1024/image-hosting/master/img/image-20231204114231084.png" alt="" loading="lazy"></figure>
<h3 id="31-入参解读创造一个元素需要知道哪些信息">3.1 入参解读：创造一个元素需要知道哪些信息</h3>
<p>我们先来看看方法的入参：</p>
<pre><code>export function createElement(type, config, children)
</code></pre>
<p>createElement 有 3 个入参，这 3 个入参囊括了 React 创建一个元素所需要知道的全部信息。</p>
<ul>
<li>type：用于标识节点的类型。它可以是类似“h1”“div”这样的标准 HTML 标签字符串，也可以是 React 组件类型或 React fragment 类型。</li>
<li>config：以对象形式传入，组件所有的属性都会以键值对的形式存储在 config 对象中。</li>
<li>children：子节点，如果有多个子节点，那么依次往后写。</li>
</ul>
<p>举个例子：</p>
<pre><code class="language-jsx">&lt;ul className=&quot;list&quot;&gt;
  &lt;li key=&quot;1&quot;&gt;1&lt;/li&gt;
  &lt;li key=&quot;2&quot;&gt;2&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>经过 Babel 转换后的形式为：</p>
<blockquote>
<p>注意：从第三个入参开始往后，传入的参数都是 children</p>
</blockquote>
<pre><code class="language-javascript">React.createElement(&quot;ul&quot;, {
  // 传入属性键值对
  className: &quot;list&quot;
}, React.createElement(&quot;li&quot;, {
  key: &quot;1&quot;
}, &quot;1&quot;), React.createElement(&quot;li&quot;, {
  key: &quot;2&quot;
}, &quot;2&quot;));

</code></pre>
<h3 id="32-出参解读初识虚拟dom">3.2 出参解读：初识虚拟DOM</h3>
<p>下面的代码是 React.createElement(...) 调用的返回值格式。</p>
<blockquote>
<p>注意：这是 fiber节点之前的每个节点的格式。</p>
</blockquote>
<pre><code class="language-react">const ReactElement = function(type, key, ref, self, source, owner, props) {
  const element = {
    // REACT_ELEMENT_TYPE是一个常量，用来标识该对象是一个ReactElement
    $$typeof: REACT_ELEMENT_TYPE,

    // 内置属性赋值
    type: type,
    key: key,
    ref: ref,
    props: props,

    // 记录创造该元素的组件
    _owner: owner,
  };

  // 
  if (__DEV__) {
    // 这里是一些针对 __DEV__ 环境下的处理，对于大家理解主要逻辑意义不大，此处我直接省略掉，以免混淆视听
  }

  return element;
};
</code></pre>
<p>举个例子</p>
<pre><code class="language-jsx">const AppJSX = (&lt;div className=&quot;App&quot;&gt;

  &lt;h1 className=&quot;title&quot;&gt;I am the title&lt;/h1&gt;

  &lt;p className=&quot;content&quot;&gt;I am the content&lt;/p&gt;

&lt;/div&gt;)

console.log(AppJSX)
</code></pre>
<p>输出为：</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/happyCoding1024/image-hosting/master/img/202312051052821.png" alt="" loading="lazy"></figure>
<p>这个 ReactElement 对象实例，本质上是<strong>以 JavaScript 对象形式存在的对 DOM 的描述</strong>，也就是老生常谈的“虚拟 DOM”（<strong>准确地说，是虚拟 DOM 中的一个节点</strong>。</p>
<p>既然是“虚拟 DOM”，那就意味着和渲染到页面上的真实 DOM 之间还有一些距离，这个“距离”，就是由大家喜闻乐见的<strong>ReactDOM.render</strong>方法来填补的。</p>
<p>在每一个 React 项目的入口文件中，都少不了对 React.render 函数的调用。下面我简单介绍下 ReactDOM.render 方法的入参规则：</p>
<p>复制代码</p>
<pre><code class="language-jsx">ReactDOM.render(
    // 需要渲染的元素（ReactElement）
    element, 
    // 元素挂载的目标容器（一个真实DOM）
    container,
    // 回调函数，可选参数，可以用来处理渲染结束后的逻辑
    [callback]
)
</code></pre>
<p>ReactDOM.render 方法可以接收 3 个参数，其中<strong>第二个参数就是一个真实的 DOM 节点</strong>，<strong>这个真实的 DOM 节点充当“容器”的角色</strong>，React 元素最终会被渲染到这个“容器”里面去。比如，示例中的 App 组件，它对应的 render 调用是这样的：</p>
<pre><code class="language-jsx">const rootElement = document.getElementById(&quot;root&quot;);
ReactDOM.render(&lt;App /&gt;, rootElement);
</code></pre>
<p>注意，这个真实 DOM 一定是确实存在的。比如，在 App 组件对应的 index.html 中，已经提前预置 了 id 为 root 的根节点：</p>
<pre><code class="language-jsx">&lt;body&gt;
    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hooks ]]></title>
        <id>https://happyCoding1024.github.io/post/react-hooks/</id>
        <link href="https://happyCoding1024.github.io/post/react-hooks/">
        </link>
        <updated>2023-11-28T03:41:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-react-组件的通信和强化方式">1. React 组件的通信和强化方式</h2>
<p>React 组件通信方式：<strong>props 和 callback、context（跨层级）、Event 事件、ref传递、状态管理（如：mobx 等）</strong> 方式。</p>
<p>强化组件方式：mixin 模式、extends 继承模式、高阶组件模式、自定义 Hooks 模式</p>
<h2 id="2-10种-react-hooks-api-的介绍和使用v16">2. 10种 React Hooks API 的介绍和使用（V16）</h2>
<p>React V16.8 提供的10个API使用方法：  <code>useState</code>、<code>useEffect</code>、<code>useContext</code>、<code>useReducer</code>、<code>useMemo</code>、<code>useCallback</code>、<code>useRef</code>、<code>useImperativeHandle</code>、<code>useLayoutEffect</code>、<code>useDebugValue</code></p>
<h3 id="21-usestate">2.1 useState</h3>
<p>React会使用浅比较来判断新旧状态是否相等，由于浅比较的限制，当你更新状态时，应该始终返回一个新的对象或数组，而不是修改原始对象或数组。这样React才能正确地检测到状态的变化，并触发重新渲染。</p>
<h3 id="22-useeffect">2.2 useEffect</h3>
<p>副作用，这个钩子成功弥补了函数式组件没有生命周期的缺陷，是我们最常用的钩子之一。</p>
<p><strong>Params：</strong></p>
<ul>
<li>
<p>callback：useEffect 的第一个入参，最终返回 <code>destory</code>，它会在下一次 callback 执行之前调用，其作用是清除上次的 callback 产生的副作用；</p>
</li>
<li>
<p>deps：依赖项，可选参数，是一个数组，可以有多个依赖项，通过依赖去改变，执行上一次的 callback 返回的 destory 和新的 effect 第一个参数 callback。</p>
</li>
</ul>
<h3 id="23-usecontext">2.3 useContext</h3>
<p>上下文，类似于 <code>Context</code>，其本意就是设置全局共享数据，使所有组件可跨层级实现共享。</p>
<p>useContext 的参数一般是由 <code>createContext</code> 创建，或者是父级上下文 <code>context</code>传递的，通过 <code>CountContext.Provider</code> 包裹的组件，才能通过 <code>useContext</code> 获取对应的值。我们可以简单理解为 <code>useContext</code> 代替 <code>context.Consumer</code> 来获取 <code>Provider</code> 中保存的 <code>value</code> 值。</p>
<p><strong>arams：</strong></p>
<ul>
<li>context：一般而言保存的是 context 对象。</li>
</ul>
<p><strong>Result：</strong></p>
<ul>
<li>contextValue：返回的数据，也就是<code>context</code>对象内保存的<code>value</code>值。</li>
</ul>
<h3 id="24-usereducer">2.4 useReducer</h3>
<p>功能类似于 <code>redux</code>，与 redux 最大的不同点在于它是单个组件的状态管理，组件通讯还是要通过 props。简单地说，useReducer 相当于是 useState 的升级版，用来处理复杂的 state 变化。</p>
<pre><code>const [state, dispatch] = useReducer(
    (state, action) =&gt; {}, 
    initialArg,
    init
);
</code></pre>
<p><strong>Params：</strong></p>
<ul>
<li>
<p>reducer：函数，可以理解为 redux 中的 reducer，最终返回的值就是新的数据源 state；</p>
</li>
<li>
<p>initialArg：初始默认值；</p>
</li>
<li>
<p>init：惰性初始化，可选值。</p>
</li>
</ul>
<p><strong>Result：</strong></p>
<ul>
<li>
<p>state：更新之后的数据源；</p>
</li>
<li>
<p>dispatch：用于派发更新的<code>dispatchAction</code>，可以认为是<code>useState</code>中的<code>setState</code>。</p>
</li>
</ul>
<p>示例:</p>
<pre><code>import { useReducer } from &quot;react&quot;;
import { Button } from &quot;antd&quot;;

const Index: React.FC&lt;any&gt; = () =&gt; {
  const [count, dispatch] = useReducer((state: number, action: any) =&gt; {
    switch (action?.type) {
      case &quot;add&quot;:
        return state + action?.payload;
      case &quot;sub&quot;:
        return state - action?.payload;
      default:
        return state;
    }
  }, 0);

  return (
    &lt;&gt;
      &lt;div&gt;count：{count}&lt;/div&gt;
      &lt;Button
        type=&quot;primary&quot;
        onClick={() =&gt; dispatch({ type: &quot;add&quot;, payload: 1 })}
      &gt;
        加1
      &lt;/Button&gt;
      &lt;Button
        type=&quot;primary&quot;
        style={{ marginLeft: 10 }}
        onClick={() =&gt; dispatch({ type: &quot;sub&quot;, payload: 1 })}
      &gt;
        减1
      &lt;/Button&gt;
    &lt;/&gt;
  );
};

export default Index;
</code></pre>
<p><strong>特别注意：</strong> 在 reducer 中，如果返回的 state 和之前的 state 值相同，那么组件将不会更新。</p>
<h3 id="25-usememo">2.5 useMemo</h3>
<p>理念与 <code>memo</code> 相同，都是判断是否满足当前的限定条件来决定是否执行<code>callback</code> 函数。它之所以能带来提升，是因为在依赖不变的情况下，会返回相同的值，避免子组件进行无意义的重复渲染。</p>
<p>可以减少函数的重新计算，不用每次都执行函数计算新的值了。</p>
<p><strong>Params：</strong></p>
<ul>
<li>
<p>fn：函数，函数的返回值会作为缓存值；</p>
</li>
<li>
<p>deps：依赖项，数组，会通过数组里的值来判断是否进行 fn 的调用，如果发生了改变，则会得到新的缓存值</p>
</li>
</ul>
<p><strong>Result：</strong></p>
<ul>
<li>cacheData：更新之后的数据源，即 fn 函数的返回值，如果 deps 中的依赖值发生改变，将重新执行 fn，否则取上一次的缓存值。</li>
</ul>
<p><strong>示例</strong>：</p>
<p>没有使用 useMemo 时</p>
<pre><code>// bad case
const [count, setCount] = useState(0);
const userInfo = {
  // ...
  age: count,
  name: 'Jace'
}
return &lt;UserCard userInfo={userInfo}&gt;
</code></pre>
<p>很明显的上面的 userInfo 每次都将是一个新的对象，无论 <code>count</code> 发生改变没，都会导致 UserCard 重新渲染。</p>
<pre><code>// good case
const [count, setCount] = useState(0);
const userInfo = useMemo(() =&gt; {
  return {
    // ...
    name: &quot;Jace&quot;,
    age: count
  };
}, [count]);

return &lt;UserCard userInfo={userInfo}&gt;
</code></pre>
<p>使用 useMemo后，只有当count改变后才会生成新的对象，如果UserCard组件使用了React.memo那么就不会每次都渲染。</p>
<h3 id="26-usecallback">2.6 useCallback</h3>
<p>与 useMemo 极其类似，甚至可以说一模一样，唯一不同的点在于，useMemo 返回的是值，而 useCallback 返回的是函数。</p>
<p>注意使用 useCallback 时只缓存函数是没有意义的，当缓存的函数作为属性传递给子组件时才有意义，并且子组件要使用 React.memo 才有意义。 因为无论怎样 useCallback 都会重新定义传递进来的函数，只是如果依赖没有变化的话就会使用之前缓存的函数实例，而不是使用新定义的函数实例，由于使用的是缓存的函数实例，而且子组件使用了 React.momo，所以子组件比较props 发现没有变化那么也就不会触发重新渲染。</p>
<p>关于 useCallback 和 useMemo 的详细比较，可以参考这篇文章 https://juejin.cn/post/6844904101445124110。</p>
<h3 id="27-useref">2.7 useRef</h3>
<p>用于获取当前元素的所有属性，除此之外，还可以缓存数据。</p>
<p>基本使用</p>
<pre><code>const ref = useRef(initialValue);
</code></pre>
<p><strong>Params：</strong></p>
<ul>
<li>initialValue：初始值，默认值。</li>
</ul>
<p><strong>Result：</strong></p>
<ul>
<li>ref：返回的是一个 current 对象，这个 current 属性就是 ref 对象需要获取的内容。</li>
</ul>
<h3 id="28-useimperativehandle">2.8 useImperativeHandle</h3>
<p>可以通过 ref 或 forwardRef 暴露给父组件的实例值，所谓的实例值是指值和函数。这个钩子可以让不同的模块关联起来，让父组件调用子组件的方法。在不使用状态管理框架的情况下，这个钩子还是很有用的。</p>
<pre><code>useImperativeHandle(ref, createHandle, deps)
</code></pre>
<p><strong>Params：</strong></p>
<ul>
<li>
<p>ref：接受 useRef 或 forwardRef 传递过来的 ref；</p>
</li>
<li>
<p>createHandle：处理函数，返回值作为暴露给父组件的 ref 对象；</p>
</li>
<li>
<p>deps：依赖项，依赖项如果更改，会形成新的 ref 对象。</p>
</li>
</ul>
<p><strong>函数式组件的用法</strong></p>
<pre><code>const Child = ({cRef}:any) =&gt; {
  const [count, setCount] = useState(0)
  useImperativeHandle(cRef, () =&gt; ({
    add
  }))

  const add = () =&gt; {
    setCount((v) =&gt; v + 1)
  }
  return &lt;div&gt;
    &lt;p&gt;点击次数：{count}&lt;/p&gt;
    &lt;Button onClick={() =&gt; add()}&gt; 子组件的按钮，点击+1&lt;/Button&gt;
  &lt;/div&gt;
}
</code></pre>
<p><strong>类组件时的用法</strong></p>
<p>如果父组件是类组件，此时不能使用useRef，可以使用 forwardRef 来协助我们处理。</p>
<p>forwardRef： 引用传递，是一种向子组件自动传递引用ref的技术。</p>
<p>讲到这里是不是对 forwardRef 感觉云里雾里的，先来考虑下面这个问题。</p>
<p>组件中允许使用 ref 通过 props 传参吗？答案是不允许，不仅是 ref，key也是不允许的，原因是在 React 内部中，ref 和 key 会形成单独的 key 名。</p>
<p>其实 forwardRef 就是为了解决无法传递 ref 的问题。</p>
<p>经过 forwardRef 包裹后，会将 props（其余参数）和 ref 拆分出来，ref 会作为第二个参数进行传递。如：</p>
<pre><code>import { useState, useRef, useImperativeHandle, Component, forwardRef } from &quot;react&quot;;
import { Button } from &quot;antd&quot;;

// props 和 ref 分开
const Child = (props:any, ref:any) =&gt; {
  const [count, setCount] = useState(0)
  useImperativeHandle(ref, () =&gt; ({
    add
  }))
  const add = () =&gt; {
    setCount((v) =&gt; v + 1)
  }
  return &lt;div&gt;
    &lt;p&gt;点击次数：{count}&lt;/p&gt;
    &lt;Button onClick={() =&gt; add()}&gt; 子组件的按钮，点击+1&lt;/Button&gt;
  &lt;/div&gt;
}
const ForwardChild = forwardRef(Child)

class Index extends Component{
  countRef:any = null
  render(){
    return   &lt;&gt;
      &lt;Button
        type=&quot;primary&quot;
        onClick={() =&gt; this.countRef.add()}
      &gt;
        父组件上的按钮，点击+1
      &lt;/Button&gt;
      {/* 使用 forwardRef 包裹后就可以使用 ref 传递了 */}
      &lt;ForwardChild ref={node =&gt; this.countRef = node} /&gt;
    &lt;/&gt;
  }
}
export default Index;
</code></pre>
<h3 id="29-uselayouteffect">2.9 useLayoutEffect</h3>
<p>与 useEffect 基本一致，不同点在于它是同步执行的。简要说明：</p>
<ul>
<li>
<p>执行顺序：useLayoutEffect 是在 DOM 更新之后，浏览器绘制之前的操作，这样可以更加方便地修改 DOM，获取 DOM 信息，这样浏览器只会绘制一次，所以 useLayoutEffect 的执行顺序在 useEffect 之前；</p>
</li>
<li>
<p>useLayoutEffect 相当于有一层防抖效果；</p>
</li>
<li>
<p>useLayoutEffect 的 callback 是同步执行的，因此会阻塞浏览器绘制。</p>
</li>
</ul>
<p><strong>useLayoutEffect 的适用场景</strong></p>
<ol>
<li>
<p>动态计算DOM元素的尺寸或位置：如果您需要获取DOM元素的尺寸或位置，并且希望在DOM更新后立即进行操作，可以使用<code>useLayoutEffect</code>。例如，您可以使用<code>useLayoutEffect</code>来计算元素的宽度和高度，并根据这些值进行后续的布局或动画操作。</p>
</li>
<li>
<p>执行DOM操作后立即触发浏览器重绘：有时，您可能需要在执行DOM操作后立即触发浏览器重绘，以确保用户能够看到更新的结果。<code>useLayoutEffect</code>可以在DOM更新后立即执行，从而确保浏览器重绘。</p>
</li>
</ol>
<p>请注意，由于<code>useLayoutEffect</code>会在DOM更新后立即执行，因此需要谨慎使用，以避免性能问题。如果没有必要立即执行，可以优先考虑使用<code>useEffect</code>，因为它会在浏览器绘制之后异步执行，对性能更友好。</p>
<p>以下是一个示例，展示了如何使用<code>useLayoutEffect</code>来计算元素的尺寸：</p>
<pre><code>import React, { useLayoutEffect, useRef } from 'react';

function Component() {
  const elementRef = useRef(null);

  useLayoutEffect(() =&gt; {
    const element = elementRef.current;
    if (element) {
      const width = element.offsetWidth;
      const height = element.offsetHeight;
      // 在这里可以使用获取到的宽度和高度进行后续操作
    }
  }, []);

  return &lt;div ref={elementRef}&gt;Hello, World!&lt;/div&gt;;
}
</code></pre>
<h3 id="210-usedebugvalue">2.10 useDebugValue</h3>
<p>useDebugValue可以帮助我们在React开发工具中显示有用的调试信息。它接受一个值和一个格式化函数作为参数，并将它们传递给React开发工具，以便在调试时显示。</p>
<p>以下是一个示例，展示了如何使用<code>useDebugValue</code>：</p>
<pre><code>import React, { useDebugValue, useState } from 'react';

function useCounter(initialValue) {
  const [count, setCount] = useState(initialValue);
  useDebugValue(count, count =&gt; `Count: ${count}`);
  const increment = () =&gt; setCount(count + 1);
  const decrement = () =&gt; setCount(count - 1);
  return { count, increment, decrement };
}

function Component() {
  const { count, increment, decrement } = useCounter(0);
  return (
    &lt;div&gt;
      &lt;button onClick={decrement}&gt;-&lt;/button&gt;
      &lt;span&gt;{count}&lt;/span&gt;
      &lt;button onClick={increment}&gt;+&lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<h2 id="3-5种-react-hooksv18">3. 5种 React Hooks（V18）</h2>
<h2 id="4-自定义hooks">4. 自定义Hooks</h2>
<h3 id="41-usemount">4.1 useMount</h3>
<pre><code>const useMount = (fn: () =&gt; void) =&gt; {
  useEffect(() =&gt; {
    fn?.();
  }, []);
};
</code></pre>
<h3 id="42-useunmount">4.2 useUnmount</h3>
<pre><code>const useUnmount = (fn: () =&gt; void) =&gt; {
  const fnRef = useRef(fn);

  useEffect(
    () =&gt; () =&gt; {
      fnRef.current();
    },
    []
  );
};
</code></pre>
<h3 id="43-useunmountedref">4.3 useUnmountedRef</h3>
<p>获取当前组件是否卸载。</p>
<pre><code>const useUnmountedRef = (): { readonly current: boolean } =&gt; {
  const unmountedRef = useRef&lt;boolean&gt;(false);
  useEffect(() =&gt; {
    unmountedRef.current = false;
    return () =&gt; {
      unmountedRef.current = true;
    };
  }, []);
  return unmountedRef;
};
</code></pre>
<h3 id="44-usesafestate">4.4 useSafeState</h3>
<p>在组件卸载后异步回调内的 setState 不再执行，这样可以避免因组件卸载后更新状态而导致的内存泄漏。</p>
<pre><code>function useSafeState&lt;S&gt;(initialState?: S | (() =&gt; S)) {
  const unmountedRef: { current: boolean } = useUnmountedRef();
  const [state, setState] = useState(initialState);
  const setCurrentState = useCallback((currentState: any) =&gt; {
    // 如果组件已经卸载了，那么不再更新
    if (unmountedRef.current) return;
    setState(currentState);
  }, []);
  return [state, setCurrentState] as const;
}
</code></pre>
<h3 id="45-useupdate">4.5 useUpdate</h3>
<p>强制组件重新渲染，最终返回一个函数。</p>
<p>实现方式有很多种，可以搞个累加器，每触发一次，就累加 1，这样就会强制刷新。</p>
<pre><code>function useUpdate() {
    const [, update] = useReducer(num =&gt; num + 1 , 0)
    
    return update
}
</code></pre>
<h3 id="46-usedebouncefn">4.6 useDebounceFn</h3>
<p>用来处理防抖函数的 Hooks.</p>
<pre><code>export const useDebounceFn = (fn, delay) =&gt; {
  const timerRef = useRef(null)

  return (...args) =&gt; {
    clearTimeout(timerRef.current)

    timerRef.current = setTimeout(() =&gt; {
      fn(...args)
    }, delay)
  }
}
</code></pre>
<h3 id="47-usedebounce">4.7 useDebounce</h3>
<h3 id="48-usethrottlefn">4.8 useThrottleFn</h3>
<h3 id="49-usethrottle">4.9 useThrottle</h3>
<h3 id="410-uselockfn">4.10 useLockFn</h3>
<h2 id=""></h2>
<h3 id="411-uselatest">4.11 useLatest</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[聊一聊 JS 中的循环引用及问题]]></title>
        <id>https://happyCoding1024.github.io/post/liao-yi-liao-js-zhong-de-xun-huan-yin-yong-ji-wen-ti/</id>
        <link href="https://happyCoding1024.github.io/post/liao-yi-liao-js-zhong-de-xun-huan-yin-yong-ji-wen-ti/">
        </link>
        <updated>2023-11-27T12:16:06.000Z</updated>
        <content type="html"><![CDATA[<p>本文主要从 JS 中为什么会出现循环引用，垃圾回收策略中引用计数为什么有很大的问题，以及循环引用时的对象在使用 JSON.stringify 时为什么会报错，怎样解决这个问题简单谈谈自己的一些理解。</p>
<h2 id="1-什么是循环引用">1. 什么是循环引用</h2>
<p>当对象 1 中的某个属性指向对象 2，对象 2 中的某个属性指向对象 1 就会出现循环引用，（当然不止这一种情况，不过原理是一样的）下面通过代码和内存示意图来说明一下。</p>
<pre><code class="language-js">function circularReference() {  
    let obj1 = {    };    
    let obj2 = {     b: obj1    };    
    obj1.a = obj2;
}
</code></pre>
<p>上述代码在内存中的示意图</p>
<figure data-type="image" tabindex="1"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hhcHB5Q29kaW5nMTAyNC9pbWFnZS1ob3N0aW5nL21hc3Rlci9pbWcvMjAyMDAxMDkyMDA3MzgucG5n?x-oss-process=image/format,png" alt="" loading="lazy"></figure>
<p>从上图可以看出 obj1 中的 a 属性引用 obj2，obj2 中的 b 属性引用 obj1，这样就构成了循环引用。</p>
<h2 id="2-js-中引用计数垃圾回收策略的问题">2. JS 中引用计数垃圾回收策略的问题</h2>
<p>先简单讲一下 JS 中引用垃圾回收策略大体是什么样的一个原理，当一个变量被赋予一个引用类型的值时，这个引用类型的值的引用计数加 1。就像是代码中的 obj1 这个变量被赋予了 obj1 这个对象的地址，obj1 这个变量就指向了这个 obj1(右上)这个对象，obj1(右上)的引用计数就会加1.当变量 obj1的值不再是 obj1(右上)这个对象的地址时，obj1(右上)这个对象的引用计数就会减1.当这个 obj1（右上）对象的引用计数变成 0 后，垃圾收集器就会将其回收，因为此时没有变量指向你，也就没办法使用你了。</p>
<p>看似很合理的垃圾回收策略为什么会有问题呢？</p>
<p>就是上面讲到的循环引用导致的，下面来分析一下。当 obj1 这个变量执行 obj1 这个对象时，obj1 这个对象的引用计数会加 1，此时引用计数值为 1，接下来 obj2 的 b 属性又指向了 obj1 这个对象，所以此时 obj1 这个对象的引用计数为 2。同理 obj2 这个对象的引用计数也为2.</p>
<p>当代码执行完后，会将变量 obj1 和 obj2 赋值为 null，但是此时 obj1 和 obj2 这两个对象的引用计数都为1，并不为 0，所以并不会进行垃圾回收，但是这两个对象已经没有作用了，在函数外部也不可能使用到它们，所以这就造成了内存泄露。</p>
<p>在现在广泛采用的标记清除回收策略中就不会出现上面的问题，标记清除回收策略的大致流程是这样的，最开始的时候将所有的变量加上标记，当执行 cycularReference 函数的时候会将函数内部的变量这些标记清除，在函数执行完后再加上标记。这些被清除标记又被加上标记的变量就被视为将要删除的变量，原因是这些函数中的变量已经无法被访问到了。像上述代码中的 obj1 和 obj2 这两个变量在刚开始时有标记，进入函数后被清除标记，然后函数执行完后又被加上标记被视为将要清除的变量，因此不会出现引用计数中出现的问题，因为标记清除并不会关心引用的次数是多少。</p>
<h2 id="3-循环引用的对象使用-jsonstringify-为什么会报错">3. 循环引用的对象使用 JSON.stringify 为什么会报错</h2>
<p><code>JSON.stringify</code> 用于将一个 JS 对象序列化为一个 JSON 字符串，假设现在我们要将 obj1 这个对象序列化为 JSON 字符串，现在我们先将 obj1 这个对象打印出来看一下。</p>
<pre><code class="language-js">function circularReference() {  
  let obj1 = {    };    
  let obj2 = {     b: obj1    };   
  obj1.a = obj2;  
  console.log(obj1);
}
circularReference();
</code></pre>
<p>结果如下所示：</p>
<figure data-type="image" tabindex="2"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hhcHB5Q29kaW5nMTAyNC9pbWFnZS1ob3N0aW5nL21hc3Rlci9pbWcvMjAyMDAxMDkyMDI5NTUucG5n?x-oss-process=image/format,png" alt="" loading="lazy"></figure>
<p>obj1 这个对象和 obj2 会无限相互引用，JSON.tostringify 无法将一个无限引用的对象序列化为 JOSN 字符串。</p>
<p>下面是 MDN 的解释：</p>
<blockquote>
<p>JSON.stringify() 将值转换为相应的JSON格式：转换值如果有 toJSON() 方法，该方法定义什么值将被序列化。非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。undefined、任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。函数、undefined 被单独转换时，会返回 undefined，如JSON.stringify(function(){}) or JSON.stringify(undefined).对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。Date 日期调用了 toJSON() 将其转换为了 string 字符串（同Date.toISOString()），因此会被当做字符串处理。NaN 和 Infinity 格式的数值及 null 都会被当做 null。其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。</p>
</blockquote>
<p>我们可以从加粗的字体中看到，对包含循环引用的对象执行 JSON.stringify，会抛出错误。</p>
<figure data-type="image" tabindex="3"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hhcHB5Q29kaW5nMTAyNC9pbWFnZS1ob3N0aW5nL21hc3Rlci9pbWcvSlNPTi5zdHJpbmdpZnklRTYlOEElQTUlRTklOTQlOTkucG5n?x-oss-process=image/format,png" alt="" loading="lazy"></figure>
<p><strong>解决方法</strong></p>
<p>一个自然的想法能不能消除循环引用，一个 <a href="https://github.com/douglascrockford/JSON-js">JSON 扩展包</a> 做到了这一点， 使用 JSON.decycle 可以去除循环引用。为了方便测试我直接在 JSON 扩展包的 Github 仓库中下载了 cycle.js 这个函数，将下面这段代码赋值到最下面，然后利用 node 运行进行测试，问题得到解决，结果如下图所示。</p>
<pre><code class="language-js">function circularReference() {  
  let obj1 = {  };  
  let obj2 = {    b: obj1  };  
  obj1.a = obj2;  
  let c = JSON.decycle(obj1);  
  console.log(JSON.stringify(c));
}
circularReference();
</code></pre>
<p>运行结果</p>
<figure data-type="image" tabindex="4"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hhcHB5Q29kaW5nMTAyNC9pbWFnZS1ob3N0aW5nL21hc3Rlci9pbWcvMjAyMDAxMDklRTYlQjYlODglRTklOTklQTQlRTUlQkUlQUElRTclOEUlQUYlRTUlQkMlOTUlRTclOTQlQTgucG5n?x-oss-process=image/format,png" alt="" loading="lazy"></figure>
<p>完，如有不恰当之处，欢迎指正哦。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React 闭包陷阱]]></title>
        <id>https://happyCoding1024.github.io/post/react-bi-bao-xian-jing/</id>
        <link href="https://happyCoding1024.github.io/post/react-bi-bao-xian-jing/">
        </link>
        <updated>2023-11-27T09:03:29.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">console.log(12)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://happyCoding1024.github.io/post/hello-gridea/</id>
        <link href="https://happyCoding1024.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>